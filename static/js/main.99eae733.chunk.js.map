{"version":3,"sources":["Components/Stopwatch/Stopwatch.js","Reducers/StopwatchReducer.js","Components/Stopwatch/StopwatchContainer.js","Reducers/ReduxStore.js","App.js","reportWebVitals.js","index.js","Components/Stopwatch/Stopwatch.module.css"],"names":["Stopwatch","props","className","s","wrapper","container","digitsWrapper","hours","timeFormat","time","btnsWrapper","onClick","startStopwatchTC","finishStopwatchTC","onDoubleClick","waitingStopwatchTC","resetStopwatchTC","initialState","isOn","setWaiting","stopwatchReducer","state","action","type","step","interval","clearInterval","connect","stopwatch","dispatch","setInterval","Date","now","startStopwatchAC","splitTime","length","setHours","h","getHours","toString","m","getMinutes","getSeconds","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.99eae733.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Stopwatch.module.css';\r\n\r\nconst Stopwatch = (props) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.container}>\r\n            <div className={s.digitsWrapper}>\r\n                <span className={s.hours}>{props.timeFormat(props.time)}</span>\r\n                {/* <span>:</span>\r\n                <span className={s.minutes}>00</span>\r\n                <span>:</span>*/}\r\n                {/* <span className={s.seconds}>{props.time}</span>  */}\r\n            </div>\r\n            \r\n            <div className={s.btnsWrapper}>\r\n                <button onClick={props.startStopwatchTC}>Start</button>\r\n                <button onClick={props.finishStopwatchTC}>Stop</button>\r\n                <button onDoubleClick={props.waitingStopwatchTC}>Wait</button>\r\n                <button onClick={props.resetStopwatchTC}>Reset</button>\r\n            </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stopwatch;","const STARTSTOPWATCH = 'STARTSTOPWATCH';\r\nconst FINISHSTOPWATCH = 'FINISHSTOPWATCH';\r\nconst RESETSTOPWATCH = 'RESETSTOPWATCH';\r\nconst WAITINGSTOPWATCH = 'WAITINGSTOPWATCH';\r\nconst STEPSTOPWATCH = 'STEPSTOPWATCH';\r\n\r\nconst initialState = {\r\n    isOn: false,\r\n    setWaiting: false,\r\n    time: 0,\r\n};\r\n\r\nconst stopwatchReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case 'STARTSTOPWATCH': {\r\n            return {\r\n                ...state,\r\n                // time: state.time + 1,\r\n                isOn: true,\r\n                step: action.step,\r\n                interval: action.interval\r\n            }\r\n        }\r\n        case 'FINISHSTOPWATCH': {\r\n            clearInterval(state.interval)\r\n            return {\r\n                ...state,\r\n                time: 0,\r\n                isOn: false\r\n            }\r\n        }\r\n        case 'STEPSTOPWATCH': {\r\n            return {\r\n                ...state,\r\n                time: state.time + (action.time - state.step),\r\n                step: action.time\r\n            }\r\n        }\r\n        case 'RESETSTOPWATCH': {\r\n            return {\r\n                ...state,\r\n                time: 0\r\n            }\r\n        }\r\n        case 'WAITINGSTOPWATCH': {\r\n            clearInterval(state.interval)\r\n            return {\r\n                ...state,\r\n                isOn: false\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst startStopwatchAC = (step, interval) => ({type: STARTSTOPWATCH, step, interval})\r\n\r\nconst finishStopwatchAC = () => ({type: FINISHSTOPWATCH})\r\n\r\nconst resetStopwatchAC = () => ({type: RESETSTOPWATCH})\r\n\r\nconst waitingStopwatchAC = () => ({type: WAITINGSTOPWATCH})\r\n\r\nconst stepStopwatchAC = (time) => ({type: STEPSTOPWATCH, time})\r\n\r\n\r\nexport const startStopwatchTC = () => {\r\n    return (dispatch) => {\r\n        const interval = setInterval( () => {\r\n            dispatch(stepStopwatchAC(Date.now()));\r\n        });\r\n        dispatch(startStopwatchAC(Date.now(), interval));\r\n    }\r\n}\r\n\r\nexport const finishStopwatchTC = () => {\r\n    return (dispatch) => {\r\n        dispatch(finishStopwatchAC());\r\n    }\r\n}\r\n\r\nexport const resetStopwatchTC = () => {\r\n    return (dispatch) => {\r\n        dispatch(resetStopwatchAC());\r\n    }\r\n}\r\n\r\nexport const waitingStopwatchTC = () => {\r\n    return (dispatch) => {\r\n        dispatch(waitingStopwatchAC());\r\n    }\r\n}\r\n\r\nexport default stopwatchReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*const { createStore } = Redux;\r\n\r\n// Initial state for reducer\r\nconst initialState = {\r\n  isOn: false,\r\n  time: 0\r\n};\r\n\r\n// Reducer function\r\nconst timer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'START_TIMER':\r\n      return {\r\n        ...state,\r\n        isOn: true,\r\n        offset: action.offset,\r\n        interval: action.interval\r\n      };\r\n    \r\n    case 'STOP_TIMER':\r\n      clearInterval(state.interval);\r\n      return {\r\n        ...initialState\r\n      };\r\n      \r\n    case 'TICK':\r\n      return {\r\n        ...state,\r\n        time: state.time + (action.time - state.offset),\r\n        offset: action.time\r\n      };\r\n\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\n// Create store using the reducer\r\nconst store = createStore(timer);\r\n\r\n// React Component to display the timer\r\nclass Timer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.start = this.start.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n  }\r\n\r\n  start() {\r\n  \r\n  const interval = setInterval(() => {\r\n  console.log('interval');\r\n      store.dispatch({\r\n      type: 'TICK',\r\n      time: Date.now()\r\n    });\r\n  });\r\n  console.log('start');\r\n    store.dispatch({\r\n      type: 'START_TIMER',\r\n      offset: Date.now(),\r\n      interval\r\n    });\r\n  }\r\n  \r\n  stop() {\r\n    store.dispatch({\r\n      type: 'STOP_TIMER'\r\n    });\r\n  }\r\n\r\n  click() {\r\n    this.props.isOn ? start() : stop();\r\n  }\r\n  \r\n  format(time) {\r\n    const pad = (time, length) => {\r\n      while (time.length < length) {\r\n        time = '0' + time;\r\n      }\r\n      return time;\r\n    }\r\n    \r\n    time = new Date(time);\r\n    let m = pad(time.getMinutes().toString(), 2);\r\n    let s = pad(time.getSeconds().toString(), 2);\r\n    let ms = pad(time.getMilliseconds().toString(), 3);\r\n    \r\n    return `${m} : ${s} . ${ms}`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Time: {this.format(this.props.time)}</h1>\r\n        <button onClick={this.props.interval ? this.stop : this.start}>\r\n          { this.props.interval ? 'Stop' : 'Start' }\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// render function that runs everytime an action is dispatched\r\nconst render = () => {\r\n  ReactDOM.render(\r\n    <Timer \r\n      time={store.getState().time}\r\n      isOn={store.getState().isOn}\r\n      interval={store.getState().interval}\r\n    />,\r\n    document.getElementById('app')\r\n  );\r\n}\r\n\r\nstore.subscribe(render);\r\nrender();*/","import React from 'react';\r\nimport Stopwatch from './Stopwatch';\r\nimport { startStopwatchTC, finishStopwatchTC, resetStopwatchTC, waitingStopwatchTC } from './../../Reducers/StopwatchReducer';\r\nimport { connect } from 'react-redux';\r\n\r\nconst StopwatchContainer = (props) => {\r\n    const timeFormat = (time) => {\r\n        const splitTime = (time, length) => {\r\n\r\n            while(time.length < length) {\r\n                time = \"0\" + time;\r\n            }\r\n            return time;\r\n        }\r\n\r\n        time = new Date(time);\r\n\r\n        time.setHours(0);\r\n        let h = splitTime(time.getHours().toString(), 2);\r\n        let m = splitTime(time.getMinutes().toString(), 2);\r\n        let s = splitTime(time.getSeconds().toString(), 2);\r\n        \r\n        return `${h}:${m}:${s}`;\r\n    }\r\n\r\n    \r\n    return (\r\n        <Stopwatch time={props.time} timeFormat={timeFormat} startStopwatchTC={props.startStopwatchTC}\r\n         finishStopwatchTC={props.finishStopwatchTC} resetStopwatchTC={props.resetStopwatchTC}\r\n         waitingStopwatchTC={props.waitingStopwatchTC}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        time: state.stopwatch.time\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { startStopwatchTC, finishStopwatchTC, resetStopwatchTC, waitingStopwatchTC })(StopwatchContainer);","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport stopwatchReducer from './StopwatchReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst reducers = combineReducers({\r\n    stopwatch: stopwatchReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport StopwatchContainer from './Components/Stopwatch/StopwatchContainer';\nimport store from './Reducers/ReduxStore';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <StopwatchContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Stopwatch_wrapper__1hrx4\",\"container\":\"Stopwatch_container__3l8KX\",\"digitsWrapper\":\"Stopwatch_digitsWrapper__3GA4S\",\"btnsWrapper\":\"Stopwatch_btnsWrapper__3gaYO\"};"],"sourceRoot":""}